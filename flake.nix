{
  description = "Personal NixOS configs";

  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";

    hyprland.url = "github:hyprwm/Hyprland";

    rose-pine-hyprcursor = {
      url = "github:ndom91/rose-pine-hyprcursor";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.hyprlang.follows = "hyprland/hyprlang";
    };

    home-manager = {
      url = "github:nix-community/home-manager";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    disko = {
      url = "github:nix-community/disko";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # pretty SDDM theme: https://github.com/uiriansan/SilentSDDM
    silentSDDM = {
      url = "github:uiriansan/SilentSDDM";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    stylix.url = "github:danth/stylix";

    nix-flatpak.url = "github:gmodena/nix-flatpak";

    nixos-cosmic.url = "github:lilyinstarlight/nixos-cosmic";

    nix-darwin = {
      url = "github:LnL7/nix-darwin/master";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    vscode-server.url = "github:nix-community/nixos-vscode-server";

    flake-utils.url = "github:numtide/flake-utils";

    quickshell = {
      url = "git+https://git.outfoxxed.me/quickshell/quickshell";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    lanzaboote = {
      url = "github:nix-community/lanzaboote/v0.4.2";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    {
      self,
      nixpkgs,
      home-manager,
      nix-flatpak,
      nixos-cosmic,
      nix-darwin,
      vscode-server,
      stylix,
      flake-utils,
      quickshell,
      lanzaboote,
      disko,
      ...
    }@inputs:
    let
      lib = nixpkgs.lib;
    in
    {
      nixosConfigurations =
        let
          mkNixosConfig =
            name:
            {
              system ? "x86_64-linux",
              useDefaultModules ? true,
              enableHomeManager ? true,
              enableFlatpak ? true,
              enableStylix ? true,
              enableVscodeServer ? false,
              enableLanzaboote ? false,
              enableDisko ? false,
              extraModules ? [ ],
            }:
            nixpkgs.lib.nixosSystem {
              specialArgs = {
                inherit inputs;
                myPkgs = inputs.self.packages.${system};
              };
              inherit system;
              modules = [
                ./hosts/${name}/configuration.nix
              ]
              ++ lib.optionals enableHomeManager [
                home-manager.nixosModules.home-manager
                {
                  home-manager.extraSpecialArgs = {
                    inherit inputs;
                    myPkgs = inputs.self.packages.${system};
                  };
                  home-manager.useGlobalPkgs = true;
                  home-manager.useUserPackages = true;
                  home-manager.users.jade = {
                    imports = [
                      ./hosts/${name}/home.nix
                    ];
                  };
                  home-manager.backupFileExtension = "backup";
                }
              ]
              ++ lib.optional useDefaultModules ./modules
              ++ lib.optional enableFlatpak nix-flatpak.nixosModules.nix-flatpak
              ++ lib.optional enableStylix stylix.nixosModules.stylix
              ++ lib.optional enableVscodeServer vscode-server.nixosModules.default
              ++ lib.optional enableLanzaboote lanzaboote.nixosModules.lanzaboote
              ++ lib.optional enableDisko disko.nixosModules.default
              ++ extraModules;
            };
        in
        {
          desktop = mkNixosConfig "desktop" { enableLanzaboote = true; };
          game-servers = mkNixosConfig "game-servers" { enableVscodeServer = true; };
          media = mkNixosConfig "media" { enableVscodeServer = true; };
          # mediapi = mkNixosConfig "mediapi" {
          #   system = "aarch64-linux";
          #   enableFlatpak = false;
          #   enableDisko = true;
          #   extraModules = [
          #     ./hosts/mediapi/hardware-configuration.nix # Generated by nixos-anywhere
          #   ];
          # };
          /*
            Cosmic stuff is adapted from FelixSchausberger's Cosmic configuration
            https://github.com/FelixSchausberger/nixos
          */
          t480 = mkNixosConfig "t480" {
            extraModules = [
              {
                nix.settings = {
                  substituters = [ "https://cosmic.cachix.org/" ];
                  trusted-public-keys = [ "cosmic.cachix.org-1:Dya9IyXD4xdBehWjrkPv6rtxpmMdRel02smYzA85dPE=" ];
                };
              }
              nixos-cosmic.nixosModules.default
            ];
          };
        };

      # MacBook configuration
      darwinConfigurations."macbook" = nix-darwin.lib.darwinSystem {
        specialArgs = { inherit inputs; };
        modules = [
          ./hosts/macbook/configuration.nix
          # stylix.nixosModules.stylix
          # nix-flatpak.nixosModules.nix-flatpak
          # home-manager.nixosModules.home-manager
          # {
          #   home-manager.extraSpecialArgs = { inherit inputs; };
          #   home-manager.useGlobalPkgs = true;
          #   home-manager.useUserPackages = true;
          #   home-manager.users.jade = {
          #     imports = [
          #       ./hosts/macbook/home.nix
          #     ];
          #   };
          #   home-manager.backupFileExtension = "backup";
          # }
        ];
      };

      homeModules.default = ./modules/home;
    }
    // flake-utils.lib.eachDefaultSystem (
      system:
      let
        pkgs = import nixpkgs {
          inherit system;
        };
        py = pkgs.python313;
        pypkgs = py.pkgs;

        fluent-emoji-webfont = import ./pkgs/fluent-emoji-webfont/default.nix { inherit pkgs; };
      in
      {
        devShells.default = pkgs.mkShell {
          # buildInputs = with pkgs; [

          # ];
          nativeBuildInputs = with pkgs; [
            ruff
            basedpyright

            gtk3
            gtk-layer-shell
            cairo
            gobject-introspection
            libdbusmenu-gtk3
            gdk-pixbuf
            gnome-bluetooth
            cinnamon-desktop
            (py.withPackages (
              ps: with ps; [
                setuptools
                wheel
                build
                (inputs.self.packages.${system}.python-fabric)
              ]
            ))
            kdePackages.qtdeclarative
          ];
        };

        packages = {
          rofi-bookmarks-zen = pkgs.callPackage ./pkgs/rofi-bookmarks-zen/derivation.nix {
            inherit pypkgs pkgs;
          };
          python-fabric = pkgs.callPackage ./pkgs/fabric/derivation.nix { inherit pypkgs pkgs lib; };
          lily-fabric = pkgs.callPackage ./pkgs/lily-fabric/derivation.nix {
            inherit pypkgs pkgs;
            python-fabric = (inputs.self.packages.${system}.python-fabric);
          };
        }
        // (lib.mapAttrs' (name: value: {
          name = "fluent-emoji-webfont-${name}";
          value = value;
        }) fluent-emoji-webfont);

        apps = {
          lily-fabric = {
            type = "app";
            program = "${self.packages.${system}.lily-fabric}/bin/bar";
            meta = {
              changelog = "";
              description = "jade's fabric configuration";
            };
          };
          rofi-bookmarks-zen = {
            type = "app";
            program = "${self.packages.${system}.rofi-bookmarks-zen}/bin/main";
            meta = {
              changelog = "";
              description = "Implementation for grabbing Zen bookmarks in rofi.";
            };
          };
        };
      }
    );
}
